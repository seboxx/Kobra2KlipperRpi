[gcode_macro G29]				
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  bed_mesh_calibrate
  G1 X0 Y0 Z10 F4200

[pause_resume]

[gcode_macro M201]
gcode:

[gcode_macro M203]
gcode:

[gcode_macro M205]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}

[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set S = params.S|default(printer.configfile.settings.printer.max_accel)|int %}
  {% set P = params.P|default(printer.configfile.settings.printer.max_accel)|int %}
  {% set T = params.T|default(printer.configfile.settings.printer.max_accel)|int %}
  {% set R = params.R|default(printer.configfile.settings.extruder.max_extrude_only_accel)|int %}
  SET_VELOCITY_LIMIT ACCEL={S} ACCEL_TO_DECEL={S/2}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 6.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 50.0) %}
      {% set z_safe = 50.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE

[gcode_macro END_PRINT]
description: End G-Code
gcode:
  M106 S0 ;Turn-off fan
  M104 S0 ;Turn-off hotend
  M140 S0 ;Turn-off bed
  
  G91 ;Relative positioning
  G1 F1800 E-20 ; Retract filament 10 mm to prevent oozing
  G1 F3000 Z10 ; Move Z Axis up 10 mm to allow filament ooze freely
  
  G90 ;Absolute positionning
  
  G1 X10 Y{printer.toolhead.axis_maximum.y} F9000;Present print
  
  M84 ; disable motors

[gcode_macro TIMELAPSE_TAKE_FRAME]
description: Timelapse Take Frame
gcode:
  {% set zhop = params.ZHOP|default(1.2)|float %}
  {% set retraction = params.RETRACTION|default(6)|float %}
  {% set wait = params.RETRACTION|default(300)|int %}
  G91 ;Relative Positioning including extruder
  G1 F1800 E-{retraction} ;Retract filament
  M400 ;Wait for moves to finish
  G1 F1800 Z{zhop} ;Z-Hop
  M400 ;Wait for moves to finish
  G90  ;Absolute Positioning including extruder
  {% set toolhead = printer.toolhead %}
  {% set x = toolhead.position.x %}
  {% set y = toolhead.position.y %}
  {% set z = toolhead.position.z %}
  G1 F15000 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} ;Park print head
  M400 ;Wait for moves to finish
  G1 F15000 X{printer.toolhead.axis_maximum.x-1} ;Realease trigger
  M400 ;Wait for moves to finish
  G4 P{wait}; Wait for camera
  G1 F15000 X{x} Y{y}
  M400 ;Wait for moves to finish
  G91 ;Relative Positioning including extruder
  G1 F1800 E{retraction} Z-{zhop} ;UnZ-Hop and Unretract filament
  G90 ;Absolute Positioning including extruder


[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    # Heat bed for probing
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    G28
    # If you are generating a new bed mesh:
    BED_MESH_CALIBRATE
    # Move the nozzle near the bed
    #G1 Z5 F3000
    #KAMP Smart Park
    Smart_Park
    # Set and wait for nozzle to reach printing temperature
    M109 S{EXTRUDER_TEMP}
    # Start printing!
    #KAMP Line Purge
    LINE_PURGE

[gcode_macro M600]
gcode:
  PAUSE

[gcode_macro SAVE]
description: Save Configuration
gcode:
  SAVE_CONFIG

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=beeper VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0

[gcode_macro bed_calibrate] #Creating bed mesh with heated hotend and bed
gcode:
  G28
  ;M104 S200
  ;M140 S60
  ;M109 S200
  M190 S60
  BED_MESH_CALIBRATE
  SAVE_CONFIG
  ;M104 S0
  ;M140 S0

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    SET_PIN PIN=power_ctrl VALUE=1
    M104 S200 ; set extruder temp
    M109 S200 ; wait for extruder temp
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    SET_PIN PIN=power_ctrl VALUE=0
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    M300 # beep
    G92 E0
    SET_PIN PIN=power_ctrl VALUE=1
    M104 S200 ; set extruder temp
    M109 S200 ; wait for extruder temp
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    SET_PIN PIN=power_ctrl VALUE=0
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro PID_HOTEND]
gcode:
    {% set temp = params.TEMP|default(250) %}
    PID_CALIBRATE HEATER=extruder TARGET={temp}
    SAVE_CONFIG


[gcode_macro SET_GCODE_OFFSET]
description: Saving Z-Offset
rename_existing: _SET_GCODE_OFFSET
gcode:
  {% if printer.save_variables.variables.zoffset %}
  {% set zoffset = printer.save_variables.variables.zoffset %}
  {% else %}
  {% set zoffset = {'z': None} %}
  {% endif %}
  {% set ns = namespace(zoffset={'z': zoffset.z}) %}
  _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
  {%if 'Z' in params %}{% set null = ns.zoffset.update({'z': params.Z}) %}{% endif %}
  {%if 'Z_ADJUST' in params %}
  {%if ns.zoffset.z == None %}{% set null = ns.zoffset.update({'z': 0}) %}{% endif %}
  {% set null = ns.zoffset.update({'z': (ns.zoffset.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=zoffset VALUE="{ns.zoffset}"


[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
  {% if printer.save_variables.variables.zoffset %}
  {% set zoffset = printer.save_variables.variables.zoffset %}
  _SET_GCODE_OFFSET {% for axis, offset in zoffset.items() if zoffset[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
  { action_respond_info("Loaded Z-Offset from variables.cfg file: %s" % (zoffset)) }
  {% endif %}